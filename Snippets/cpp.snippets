snippet main
int main() {
	$1





	return 0;
}

endsnippet

snippet fori
for(int i = $1; i < $2; i++) {
	$3
}
endsnippet

snippet nest
for(int i = $1; i < $2; i++) {
	for(int j = $3; j < $4; j++) {
		$5
	}
}
endsnippet

snippet fork
for(int k = $1; k < $2; k++) {
	$3
}
endsnippet

snippet case
printf("Case %d:\n", tc);
endsnippet

snippet memset
memset($1,0,sizeof($1));
endsnippet

snippet preciseprint
cout << setprecision(10) << fixed << $1 <<"\n";
endsnippet

snippet vi
vector<int> $1
endsnippet

snippet vpii
vector<pii> $1
endsnippet

snippet sort
sort($1.begin(), $1.end());
endsnippet


snippet rsort
sort($1.rbegin(), $1.rend());
endsnippet

snippet edgestruct
struct edge {
	int u,v,w;
	bool operator<(const edge &p) const {
		return w < p.w;
	}
}
endsnippet

snippet filein
freopen("input.txt", "r", stdin);
endsnippet

snippet fileout
freopen("output.txt", "w", stdout);
endsnippet

snippet clockstart
clock_t tStart = clock();
endsnippet

snippet clockend
fprintf(stderr, "\n>> Runtime: %.10fs\n", (double) (clock() - tStart) / CLOCKS_PER_SEC);
endsnippet

snippet debugcode
#ifdef LOCAL
     #define debug(...) __f(#__VA_ARGS__, __VA_ARGS__)
    template < typename Arg1 >
    void __f(const char* name, Arg1&& arg1){
        cout << name << " = " << arg1 << std::endl;
    }
    template < typename Arg1, typename... Args>
    void __f(const char* names, Arg1&& arg1, Args&&... args){
        const char* comma = strchr(names+1, ',');
        cout.write(names, comma - names) << " = " << arg1 <<" | ";
        __f(comma+1, args...);
    }
#else
    #define debug(...)
#endif
endsnippet

snippet direction
int fx[]={+0,+0,+1,-1,-1,+1,-1,+1};
int fy[]={-1,+1,+0,+0,+1,+1,-1,-1};
endsnippet

snippet dcon
#define done(x) {cout<<x<<"\n";continue;} 
endsnippet

snippet dret
#define done(x) {cout<<x<<"\n";return 0;} 
endsnippet

snippet preciseprint
cout<<setprecision(10)<<fixed<<${1:ans}<<"\n";
endsnippet

